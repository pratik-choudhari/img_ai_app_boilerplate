{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Image\ud83d\uddbc Classification App Boilerplate Have you been puzzled by tons of videos, blogs and other resources on the internet and don't know where and how to deploy your AI models? Won't it be nice if you could have a template where you just insert your trained model files, edit some promo text and Voila, it's done. Well, look no further because this repository makes it as easy for you as it sounds!","title":"Home"},{"location":"#image-classification-app-boilerplate","text":"Have you been puzzled by tons of videos, blogs and other resources on the internet and don't know where and how to deploy your AI models? Won't it be nice if you could have a template where you just insert your trained model files, edit some promo text and Voila, it's done. Well, look no further because this repository makes it as easy for you as it sounds!","title":"Image\ud83d\uddbc Classification App Boilerplate"},{"location":"deployment/","text":"Pushing the code to GitHub \ud83d\ude9b Create a new github repository with an approriate name say my my_app ( DO NOT ADD LICENSE, README, CODE OF CONDUCT, GITIGNORE files at this moment) Depending upon your preference, you can make the repository private or public Open the Terminal/Command Prompt once again Make new folder having the same name as the github repository name mkdir my_app Now let's copy all the files of the folder containing our prototype to this folder cp -a ./img_ai_app_boilerplate/. ./my_app/ Navigate to the location of the above newly created directory cd my_app After copying, please feel free to remove the documentation related files that are unnecessary for your prototype rm -r Guides\\ rm LICSENSE CODE_OF_CONDUCT.md CONTRIBUTING.md README.MD rm -r assets\\readme_assets\\ Intiatilize the directory as a git repository git init Set remote to your repository on GitHub( Copy the link of the repository from the Address Bar) git remote add origin https://github.com/your_github_username/my_app.git Track and commit the current changes git add . git commit -m \"v.0.0.1\" Push the changes to your remote repository on GitHub git push origin main Once successsful, close the terminal. Go to GitHub and locate the repository to check if the changes are reflected Now add your own custom: README.MD file (To describe your project in brief) LICENSE file (This depends upon you. I prefer going with MIT License for my open source repositories) CODE_OF_CONDUCT.MD ( GitHub already provides a template for this) Short Repository Description on the right Relevant Tags","title":"Deployment"},{"location":"deployment/#pushing-the-code-to-github","text":"Create a new github repository with an approriate name say my my_app ( DO NOT ADD LICENSE, README, CODE OF CONDUCT, GITIGNORE files at this moment) Depending upon your preference, you can make the repository private or public Open the Terminal/Command Prompt once again Make new folder having the same name as the github repository name mkdir my_app Now let's copy all the files of the folder containing our prototype to this folder cp -a ./img_ai_app_boilerplate/. ./my_app/ Navigate to the location of the above newly created directory cd my_app After copying, please feel free to remove the documentation related files that are unnecessary for your prototype rm -r Guides\\ rm LICSENSE CODE_OF_CONDUCT.md CONTRIBUTING.md README.MD rm -r assets\\readme_assets\\ Intiatilize the directory as a git repository git init Set remote to your repository on GitHub( Copy the link of the repository from the Address Bar) git remote add origin https://github.com/your_github_username/my_app.git Track and commit the current changes git add . git commit -m \"v.0.0.1\" Push the changes to your remote repository on GitHub git push origin main Once successsful, close the terminal. Go to GitHub and locate the repository to check if the changes are reflected Now add your own custom: README.MD file (To describe your project in brief) LICENSE file (This depends upon you. I prefer going with MIT License for my open source repositories) CODE_OF_CONDUCT.MD ( GitHub already provides a template for this) Short Repository Description on the right Relevant Tags","title":"Pushing the code to GitHub \ud83d\ude9b"},{"location":"firebase/","text":"D. Storing the Images\ud83d\udce4 and User Feedback Online Setting up Firebase Login in to Firebase , using your Gmail ID . Click on the Get Started button which will, take you to your console. Creating a project Click on Add project . Once you do so, a 3 Step process will start. Enter the name of your project. ( Pro tip: Keep the same name as the name of your App. It would make it easier to identify.) The next step is pretty self explanatory and you may/may not choose to enable google analytics. If you choose to enable google analytics, then you will have to select or create a Google Analytics account . If you choose not to, then a Create project button will appear instead of Continue. Once you click on Create project , you will land on Firebase Console. Setting up Storage Once you land on the Firebase Console, click on the Create Web App icon. Give the name of your web app and unless required, do not select the Hosting option and click next . Copy the code which appears and store in a config.txt file for later use. Click on Continue to Console . Once on Console, click on the Storage Option on the left panel and then click on Get Started . Click Next and then select a server closest to your location. Once the Storage is initiated, click on the Rules tab and change: allow read, write: if request.auth != null; to allow read, write; in the code snippet which appears on the screen. Note: This is only for testing purposes and in real life scenarios refrain from doing this. This change basically allows us the upload and download the images without authenticating every time. With this you have set up the Storage successfully . You can manage your app's cloud server from here. Setting up Realtime Database Click on the Realtime Database Option on the left panel. Once on the page, click on Create Database button. When you click the button, there will be a prompt to set the Security rules. It is recommended to start in locked mode so as to ensure security of the data. With this you have set up the Database successfully . Now whenever a user writes a feedback, you can check it here in this database. Since this database stores data in terms of JSON files, you can also export the JSON file and use it in whichever way you like. Linking Firebase in the App Since everything is set up in the Firebase Console, the only thing left to do is to link the services to your app. You can do it this way: Open firebase_bro.py Remember the config.txt file which we created earlier? Open it up and copy the contents of firebaseConfig into config variable inside firebase_bro.py . Save the File. Voila! You have Successfully set up Firebase into your app! Removing FIREBASE\ud83d\udc4b\ud83d\udc4b If you do not want to use firebase please feel free to: Remove the firebase_bro.py file from the current working directory Delete the following lines from the app.py file: import firebase_bro . firebase_bro.send_img(image) line inside the Home block of the if else condition. firebase_bro.send_feedback(first_name, last_name, user_email, feedback) line inside the Feedback block of the if else condition. Also remove firebase and all the lines below the comment For Handling firebase and pyrebase dependency issues in the requirements.txt REMEMBER: The current version of the app only supports jpg, png and jpeg images as input","title":"Online Data Storage"},{"location":"firebase/#d-storing-the-images-and-user-feedback-online","text":"","title":"D. Storing the Images\ud83d\udce4 and User Feedback Online"},{"location":"firebase/#setting-up-firebase","text":"Login in to Firebase , using your Gmail ID . Click on the Get Started button which will, take you to your console.","title":"Setting up Firebase"},{"location":"firebase/#creating-a-project","text":"Click on Add project . Once you do so, a 3 Step process will start. Enter the name of your project. ( Pro tip: Keep the same name as the name of your App. It would make it easier to identify.) The next step is pretty self explanatory and you may/may not choose to enable google analytics. If you choose to enable google analytics, then you will have to select or create a Google Analytics account . If you choose not to, then a Create project button will appear instead of Continue. Once you click on Create project , you will land on Firebase Console.","title":"Creating a project"},{"location":"firebase/#setting-up-storage","text":"Once you land on the Firebase Console, click on the Create Web App icon. Give the name of your web app and unless required, do not select the Hosting option and click next . Copy the code which appears and store in a config.txt file for later use. Click on Continue to Console . Once on Console, click on the Storage Option on the left panel and then click on Get Started . Click Next and then select a server closest to your location. Once the Storage is initiated, click on the Rules tab and change: allow read, write: if request.auth != null; to allow read, write; in the code snippet which appears on the screen. Note: This is only for testing purposes and in real life scenarios refrain from doing this. This change basically allows us the upload and download the images without authenticating every time. With this you have set up the Storage successfully . You can manage your app's cloud server from here.","title":"Setting up Storage"},{"location":"firebase/#setting-up-realtime-database","text":"Click on the Realtime Database Option on the left panel. Once on the page, click on Create Database button. When you click the button, there will be a prompt to set the Security rules. It is recommended to start in locked mode so as to ensure security of the data. With this you have set up the Database successfully . Now whenever a user writes a feedback, you can check it here in this database. Since this database stores data in terms of JSON files, you can also export the JSON file and use it in whichever way you like.","title":"Setting up Realtime Database"},{"location":"firebase/#linking-firebase-in-the-app","text":"Since everything is set up in the Firebase Console, the only thing left to do is to link the services to your app. You can do it this way: Open firebase_bro.py Remember the config.txt file which we created earlier? Open it up and copy the contents of firebaseConfig into config variable inside firebase_bro.py . Save the File. Voila! You have Successfully set up Firebase into your app!","title":"Linking Firebase in the App"},{"location":"firebase/#removing-firebase","text":"If you do not want to use firebase please feel free to: Remove the firebase_bro.py file from the current working directory Delete the following lines from the app.py file: import firebase_bro . firebase_bro.send_img(image) line inside the Home block of the if else condition. firebase_bro.send_feedback(first_name, last_name, user_email, feedback) line inside the Feedback block of the if else condition. Also remove firebase and all the lines below the comment For Handling firebase and pyrebase dependency issues in the requirements.txt REMEMBER: The current version of the app only supports jpg, png and jpeg images as input","title":"Removing FIREBASE\ud83d\udc4b\ud83d\udc4b"},{"location":"frontend/","text":"Frontend and Content Changes Continuing with changes to the User Interface or the frontend of our app please follow the steps mentioned below: Home Page \ud83c\udfe1 Open app.py Search for st.title and update the Title of the app as per your application's needs. [say st.title('Our Cats vs Dogs Classifier') ] Now search for variable page_title and update it with the same. This will tweak the SEO . [say page_title=\"Cats Vs Dogs\", ] If you have some affiliation or maybe the app is made completely by you (perhaps with a group of your friends/colleagues) as a pet project, you can reflect that in the app by searching for st.subheader and updating it [say st.subheader(\"By John Doe and Jane Doe\") ] ^^ Delete any or all code that you won't use from the above Contact Page \ud83e\udd33 Search for the function call display_team(\"Your Awesome Name\", \"./assets/profile_pic.png\",\"Your Awesome Affliation\",\"hello@youareawesome.com\" and update the following parameters as per your own discretion: Name path_to_image (I would suggest storing the images inside assets/images/ Affiliation email For adding multiple members, you can call the same function multiple times. For example: display_team(\"John Doe\",\"./assets/john_doe.png\",\"Stanford University\",\"contact@johndoe.com\") display_team(\"Jane Doe\",\"./assets/jane_doe.png\",\"Harvard University\",\"contact@janedoe.com\")","title":"Frontend Chages"},{"location":"frontend/#frontend-and-content-changes","text":"Continuing with changes to the User Interface or the frontend of our app please follow the steps mentioned below:","title":"Frontend and Content Changes"},{"location":"frontend/#home-page","text":"Open app.py Search for st.title and update the Title of the app as per your application's needs. [say st.title('Our Cats vs Dogs Classifier') ] Now search for variable page_title and update it with the same. This will tweak the SEO . [say page_title=\"Cats Vs Dogs\", ] If you have some affiliation or maybe the app is made completely by you (perhaps with a group of your friends/colleagues) as a pet project, you can reflect that in the app by searching for st.subheader and updating it [say st.subheader(\"By John Doe and Jane Doe\") ] ^^ Delete any or all code that you won't use from the above","title":"Home Page \ud83c\udfe1"},{"location":"frontend/#contact-page","text":"Search for the function call display_team(\"Your Awesome Name\", \"./assets/profile_pic.png\",\"Your Awesome Affliation\",\"hello@youareawesome.com\" and update the following parameters as per your own discretion: Name path_to_image (I would suggest storing the images inside assets/images/ Affiliation email For adding multiple members, you can call the same function multiple times. For example: display_team(\"John Doe\",\"./assets/john_doe.png\",\"Stanford University\",\"contact@johndoe.com\") display_team(\"Jane Doe\",\"./assets/jane_doe.png\",\"Harvard University\",\"contact@janedoe.com\")","title":"Contact Page \ud83e\udd33"},{"location":"getting_started/","text":"Fetching our template and setting it up: I assume you have Python(with Anaconda) installed in your operating system and set to path. If not, please visit this . Using GIT along with Python is highly recommended for version control and deployment Open GitHub Log in with your credentials. [ Create an account if you have not done it already] Open the terminal/command prompt on your system Move to a suitable location where you want to keep the project files locally (Example: cd Desktop/projects ) Clone this repository. git clone --depth 1 https://github.com/smaranjitghose/img_ai_app_boilerplate.git Navigate inside your cloned copy of the template cd img_ai_app_boilerplate Now, let's fetch our dependencies to run our app. [A python package called StreamLit is at the heart of this app] pip install -r requirements.txt In the next section, check out how integrate your model files inside the app. NOTE: For now, we are exclusively focused on image classification models built using tensorflow/pytorch. Later we would expand to models dealing with text and speech data as well as training using MXNet or a julia environment","title":"Getting Started"},{"location":"getting_started/#fetching-our-template-and-setting-it-up","text":"I assume you have Python(with Anaconda) installed in your operating system and set to path. If not, please visit this . Using GIT along with Python is highly recommended for version control and deployment Open GitHub Log in with your credentials. [ Create an account if you have not done it already] Open the terminal/command prompt on your system Move to a suitable location where you want to keep the project files locally (Example: cd Desktop/projects ) Clone this repository. git clone --depth 1 https://github.com/smaranjitghose/img_ai_app_boilerplate.git Navigate inside your cloned copy of the template cd img_ai_app_boilerplate Now, let's fetch our dependencies to run our app. [A python package called StreamLit is at the heart of this app] pip install -r requirements.txt In the next section, check out how integrate your model files inside the app. NOTE: For now, we are exclusively focused on image classification models built using tensorflow/pytorch. Later we would expand to models dealing with text and speech data as well as training using MXNet or a julia environment","title":"Fetching our template and setting it up:"},{"location":"hosting/","text":"Hosting your app using a cloud service provider Now as per your choice of hosting service, please refer the following guides: Heroku Visit Heroku's website . Log In. If you do not have an account please set it up. [Tip: Using GitHub to setup account makes things easier + you can make use of GitHub Education Pack if you are a student ] Open Your Dashboard Click on Create New App. Give an appropriate name and click next . Change the Deployment method to GitHub and connect your account. Now, search for the repository you made and modified using this template. Connect it. Choose the branch. (Initially, this would be the master branch and later you can have multiple branches to choose from if you are experimenting with prototypes of different models trained for the same task.) Choose either automatic or manual deploy. NOTE: Unless you have a CI like CircleCI set up in your repository and are aware of how it works please go for Manual Deploy option. Click on Deploy Branch . Sit back and relax! Your entire app is being setup and will be served in a while. Some useful tips: If you wish to check the size occupied by your files for the deploy in Heroku: Open your app dashboard Click on More Option on the right of the Menu bar Select Run Console Paste the command: $ du -sh * | sort -hr Press Enter. You can add a .slugignore file (Similar to a .gitignore file we use for git to untrack files while we add/commit) to your application to tell the slug compiler to ignore any unnecessary files in your application, such as static assets . To View Logs using CLI: $ heroku logs --tail NOTE: For the free tier, it is suggested that you use models that are small in size to avoid issues to the limited slug size Heroku Provides. References My slug size is too large. How can I make it smaller? Google Kubernetes Engine Log in to Your preferred Google Account and Open Your Google Cloud Console Search for Manage Resources Click on create New Project Give a suitable Project Name (say your-project-name) Open Google Cloud Console from the top right Fetch our source code using git git clone https://github.com/yourusername/your-project-repo-name.git Checking what we got ls -aH Navigating to the directory that contains our source code cd your-project-repo-name Setting Project ID Environment Variable export PROJECT_ID=export PROJECT_ID=your-project-name Now let's build our docker image and tag it for uploading docker build -t gcr.io/${PROJECT_ID}/insurance-streamlit:v1 Checking what we got docker images Ensure Google Cloud Container Registry is enabled Authenticate Google Container Registry gcloud auth configure-docker Let's upload our Docker Image to Google Cloud Container Registry docker push gcr.io/${PROJECT_ID}/insurance-streamlit:v1 Set up the project ID and Compute Engine Zone for gcloud tool gcloud config set project $PROJECT_ID gcloud config set compute/zone us-central1 Create a Kubernetes Cluster gcloud container clusters create streamlit-cluster --num-nodes=2 Use Kubernetes Cluster Management System to deploy our app replicas and schedule them to run on nodes in the cluster kubectl create deployment insurance-streamlit --image=gcr.io/${PROJECT_ID}/insurance-streamlit:v1 Expose the app to Internet traffic by creating an external IP and a Load Balancer kubectl expose deployment insurance-streamlit --type=LoadBalancer --port 80 --target-port 8501 Checking our app kubectl get service Set up a DNS*** Scale up the application by adding additional pods, or delete the Service and container cluster to avoid incurring unwanted charge*** *** Will be covered later Amazon EC2 Visit AWS Portal . Log in. If you dont have an account set it up. It will ask you for Credit Card details . [ Tip : Use College Email ID if possible, so you can access AWS Educate without any hassle of using a Credit Card or without any fear of charges. ] [ Caution : When you create an AWS account, you're automatically signed up for the Free Tier for 12 months. Your Free Tier eligibility expires at the end of the 12-month period. When your Free Tier expires, AWS starts charging the regular rates for any AWS services and resources that you're using. For more details refer this . ] The new user created will be root user and will have access to all the services and resources (unrestricted access) [ Not applicable for people using AWS Educate, though you will have have access to all the services and resources ] Search for EC2 Service on Management Console Search. On EC2 Dashboard, click on \u201cLaunch Instance\u201d. Choose an AMI (Amazon Machine Instance). Here choose, Amazon Linux AMI 2018.03.0 as it comes under Free Tier. Choose an Instance Type. Here, choose t2.micro . You can opt for a bigger machine to deal with a powerful model or are willing to pay. Configure Instance Details, Add Storage and Tags ( All default value, no change, click on Next ). Configure Security Group * SSH (port 22) is by default added to Inbound Rule. Click on Add Rule Type = Custom TCP Rule, Port Range = 8501 and Source: Anywhere. We use the port 8501 here since it is the custom port used by Streamlit. Ignore Warning as of now Click on Review & Launch Review the configuration you provided, ignore the warning about Security Group as of now. Click on \u201cLaunch\u201d A pop-up will appear and ask you to Create a new key-pair (Public-Private) Select - Create a new key pair Provide key pair name = img_ai_app_streamlit Click on \u201cDownload Key Pair\u201d Keep this key safe as it would be required every time you need to login to this particular machine. Click on \u201cLaunch Instance\u201d after downloading the key pair Click on View Instances. You can now go to your instances to see if your instance has started. EC2 Setup form Local Machine There are several methods of getting access into our instance using SSH. If you are on a Unix based system such as Linux or macOs you will have SSH already. For Windows users you will need to use putty and puttygen to gain access. For Unix users Your key must not be publicly viewable for SSH to work. Use this command: chmod 400 img_ai_app_streamlit.pem Then, connect to your instance using its Public DNS: ssh i img_ai_app_streamlit.pem ec2-user@your_public_dns_address Select your instance, and copy the Public DNS(IPv4) Address from the description. It should be something starting with ec2. For Windows users Follow this . Now we are in our AWS EC2 Instance. Setting Up Environment The next step is to install python and all the necessary libraries for your app. sudo apt-get install python3 git After these two installation we can use git to get our app within our instance. If you are on Windows you can also use WinSCP to copy your files to your instance. Refer this . Now, clone your repository into instance. git clone link_to_your_repository.git The next step is to cd into repository and install required packages using python3 -m pip install streamlit Now, just run the app and you can see your app live on the External URL. streamlit run app.py However in order to keep the app running even after you close SSH shell, you need to use tmux . We will use this to create a session and run app in that session. sudo apt-get install tmux tmux new -s NewSession You can see that the session name is \u201cNewSession\u201d at the bottom of the screen. You can now start running streamlit in the tmux session. streamlit run app.py The next step is to detach tmux session so that it continues running in the background when you leave the SSH shell. To do this just press Ctrl+B and then D You can now close your SSH session and the app will continue running at the External URL.","title":"Hosting"},{"location":"hosting/#hosting-your-app-using-a-cloud-service-provider","text":"Now as per your choice of hosting service, please refer the following guides:","title":"Hosting your app using a cloud service provider"},{"location":"hosting/#heroku","text":"Visit Heroku's website . Log In. If you do not have an account please set it up. [Tip: Using GitHub to setup account makes things easier + you can make use of GitHub Education Pack if you are a student ] Open Your Dashboard Click on Create New App. Give an appropriate name and click next . Change the Deployment method to GitHub and connect your account. Now, search for the repository you made and modified using this template. Connect it. Choose the branch. (Initially, this would be the master branch and later you can have multiple branches to choose from if you are experimenting with prototypes of different models trained for the same task.) Choose either automatic or manual deploy. NOTE: Unless you have a CI like CircleCI set up in your repository and are aware of how it works please go for Manual Deploy option. Click on Deploy Branch . Sit back and relax! Your entire app is being setup and will be served in a while.","title":"Heroku"},{"location":"hosting/#some-useful-tips","text":"If you wish to check the size occupied by your files for the deploy in Heroku: Open your app dashboard Click on More Option on the right of the Menu bar Select Run Console Paste the command: $ du -sh * | sort -hr Press Enter. You can add a .slugignore file (Similar to a .gitignore file we use for git to untrack files while we add/commit) to your application to tell the slug compiler to ignore any unnecessary files in your application, such as static assets . To View Logs using CLI: $ heroku logs --tail NOTE: For the free tier, it is suggested that you use models that are small in size to avoid issues to the limited slug size Heroku Provides.","title":"Some useful tips:"},{"location":"hosting/#references","text":"My slug size is too large. How can I make it smaller?","title":"References"},{"location":"hosting/#google-kubernetes-engine","text":"Log in to Your preferred Google Account and Open Your Google Cloud Console Search for Manage Resources Click on create New Project Give a suitable Project Name (say your-project-name) Open Google Cloud Console from the top right Fetch our source code using git git clone https://github.com/yourusername/your-project-repo-name.git Checking what we got ls -aH Navigating to the directory that contains our source code cd your-project-repo-name Setting Project ID Environment Variable export PROJECT_ID=export PROJECT_ID=your-project-name Now let's build our docker image and tag it for uploading docker build -t gcr.io/${PROJECT_ID}/insurance-streamlit:v1 Checking what we got docker images Ensure Google Cloud Container Registry is enabled Authenticate Google Container Registry gcloud auth configure-docker Let's upload our Docker Image to Google Cloud Container Registry docker push gcr.io/${PROJECT_ID}/insurance-streamlit:v1 Set up the project ID and Compute Engine Zone for gcloud tool gcloud config set project $PROJECT_ID gcloud config set compute/zone us-central1 Create a Kubernetes Cluster gcloud container clusters create streamlit-cluster --num-nodes=2 Use Kubernetes Cluster Management System to deploy our app replicas and schedule them to run on nodes in the cluster kubectl create deployment insurance-streamlit --image=gcr.io/${PROJECT_ID}/insurance-streamlit:v1 Expose the app to Internet traffic by creating an external IP and a Load Balancer kubectl expose deployment insurance-streamlit --type=LoadBalancer --port 80 --target-port 8501 Checking our app kubectl get service Set up a DNS*** Scale up the application by adding additional pods, or delete the Service and container cluster to avoid incurring unwanted charge*** *** Will be covered later","title":"Google Kubernetes Engine"},{"location":"hosting/#amazon-ec2","text":"Visit AWS Portal . Log in. If you dont have an account set it up. It will ask you for Credit Card details . [ Tip : Use College Email ID if possible, so you can access AWS Educate without any hassle of using a Credit Card or without any fear of charges. ] [ Caution : When you create an AWS account, you're automatically signed up for the Free Tier for 12 months. Your Free Tier eligibility expires at the end of the 12-month period. When your Free Tier expires, AWS starts charging the regular rates for any AWS services and resources that you're using. For more details refer this . ] The new user created will be root user and will have access to all the services and resources (unrestricted access) [ Not applicable for people using AWS Educate, though you will have have access to all the services and resources ] Search for EC2 Service on Management Console Search. On EC2 Dashboard, click on \u201cLaunch Instance\u201d. Choose an AMI (Amazon Machine Instance). Here choose, Amazon Linux AMI 2018.03.0 as it comes under Free Tier. Choose an Instance Type. Here, choose t2.micro . You can opt for a bigger machine to deal with a powerful model or are willing to pay. Configure Instance Details, Add Storage and Tags ( All default value, no change, click on Next ). Configure Security Group * SSH (port 22) is by default added to Inbound Rule. Click on Add Rule Type = Custom TCP Rule, Port Range = 8501 and Source: Anywhere. We use the port 8501 here since it is the custom port used by Streamlit. Ignore Warning as of now Click on Review & Launch Review the configuration you provided, ignore the warning about Security Group as of now. Click on \u201cLaunch\u201d A pop-up will appear and ask you to Create a new key-pair (Public-Private) Select - Create a new key pair Provide key pair name = img_ai_app_streamlit Click on \u201cDownload Key Pair\u201d Keep this key safe as it would be required every time you need to login to this particular machine. Click on \u201cLaunch Instance\u201d after downloading the key pair Click on View Instances. You can now go to your instances to see if your instance has started.","title":"Amazon EC2"},{"location":"hosting/#ec2-setup-form-local-machine","text":"There are several methods of getting access into our instance using SSH. If you are on a Unix based system such as Linux or macOs you will have SSH already. For Windows users you will need to use putty and puttygen to gain access. For Unix users Your key must not be publicly viewable for SSH to work. Use this command: chmod 400 img_ai_app_streamlit.pem Then, connect to your instance using its Public DNS: ssh i img_ai_app_streamlit.pem ec2-user@your_public_dns_address Select your instance, and copy the Public DNS(IPv4) Address from the description. It should be something starting with ec2. For Windows users Follow this . Now we are in our AWS EC2 Instance.","title":"EC2 Setup form Local Machine"},{"location":"hosting/#setting-up-environment","text":"The next step is to install python and all the necessary libraries for your app. sudo apt-get install python3 git After these two installation we can use git to get our app within our instance. If you are on Windows you can also use WinSCP to copy your files to your instance. Refer this . Now, clone your repository into instance. git clone link_to_your_repository.git The next step is to cd into repository and install required packages using python3 -m pip install streamlit Now, just run the app and you can see your app live on the External URL. streamlit run app.py However in order to keep the app running even after you close SSH shell, you need to use tmux . We will use this to create a session and run app in that session. sudo apt-get install tmux tmux new -s NewSession You can see that the session name is \u201cNewSession\u201d at the bottom of the screen. You can now start running streamlit in the tmux session. streamlit run app.py The next step is to detach tmux session so that it continues running in the background when you leave the SSH shell. To do this just press Ctrl+B and then D You can now close your SSH session and the app will continue running at the External URL.","title":"Setting Up Environment"},{"location":"model_integration/","text":"Integrating our Trained Model: Open the model sub-directory cd model start . Paste your Keras.h5 model files there Shoot up your favorite code editor/IDE (I prefer VSCode). code . [Type this in the terminal to open VSCode if you already have it installed] Now open the file img_classifier.py Search for the variable labels in the code and set its' value as per the labels of the dataset used for training your model. For example: if you are doing Cats Vs Dogs classification then, labels = {0: \"Cats\", 1: \"Dogs\"} NOTE: This is totally dependent on your model training Update the value of the variable model with the path of your model file. For Example: model = tensorflow.keras.models.load_model('model/catsvsdogs.h5') Save the changes.","title":"Model Integration"},{"location":"model_integration/#integrating-our-trained-model","text":"Open the model sub-directory cd model start . Paste your Keras.h5 model files there Shoot up your favorite code editor/IDE (I prefer VSCode). code . [Type this in the terminal to open VSCode if you already have it installed] Now open the file img_classifier.py Search for the variable labels in the code and set its' value as per the labels of the dataset used for training your model. For example: if you are doing Cats Vs Dogs classification then, labels = {0: \"Cats\", 1: \"Dogs\"} NOTE: This is totally dependent on your model training Update the value of the variable model with the path of your model file. For Example: model = tensorflow.keras.models.load_model('model/catsvsdogs.h5') Save the changes.","title":"Integrating our Trained Model:"},{"location":"testing/","text":"Testing\ud83e\uddea the app Locally Now, we are all set to test our prototype! Open the terminal/command prompt and type $ streamlit run app.py Give it a few seconds to start on your local server, load Tensorflow and other cool stuff the app requires in order to function properly. Upload Your Image, Click on Predict, Verify the working NOTE: If you face any difficulties please raise an issue and let me know","title":"Testing"},{"location":"testing/#testing-the-app-locally","text":"Now, we are all set to test our prototype! Open the terminal/command prompt and type $ streamlit run app.py Give it a few seconds to start on your local server, load Tensorflow and other cool stuff the app requires in order to function properly. Upload Your Image, Click on Predict, Verify the working NOTE: If you face any difficulties please raise an issue and let me know","title":"Testing\ud83e\uddea the app Locally"}]}